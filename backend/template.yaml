AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::Serverless-2016-10-31'

Description: "T2 Template v4"


Globals:
  Function:
    Runtime: python3.8
    Timeout: 180
    Environment:
      Variables:
        DEBUG_MODE: True
        BUCKET_NAME: !Ref DataStoreBucket


Parameters:



  s3BucketName: 
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: a
    Description: Bucket name suffix
    Type: String

  DatabaseUser:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: t2admin
    Description: Username for MySQL database access
    MaxLength: 16
    MinLength: 1
    Type: String

  DatabasePassword:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters
    Default: t2password
    Description: Password for MySQL database access
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String

Resources:

  # Main S3 Bucket

  DataStoreBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "t2-transcribe-and-translate-${AWS::Region}-${AWS::AccountId}-${s3BucketName}"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - x-amz-server-side-encryption
              - x-amz-request-id
              - x-amz-id-2
              - ETag
            MaxAge: 3000
  
            
  t2S3BucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: S3 Bucket Name
      Name: t2-s3-bucket-name
      Type: String
      Value: !Ref DataStoreBucket
    DependsOn: DataStoreBucket

  #VPC and Subnets for RDS  

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true

  PublicSubnetsRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicSubnetsRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicSubnetsRouteTable
      SubnetId: !Ref PublicSubnet2

  InternetGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicSubnetsRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn:
      - AttachGateway

  SubnetID:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Description
      DBSubnetGroupName: t2subnetname-t1
      SubnetIds: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  # Lambda functions

  transcriptionStatus:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./functions/2transcriptionStatus
      Role: !GetAtt lambdaIamRole.Arn
      Handler: 2transcriptionStatus.lambda_handler

  postTranscription:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./functions/3postTranscription
      Role: !GetAtt lambdaIamRole.Arn
      Handler: 3postTranscription.lambda_handler 

  translationStatus:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./functions/4translationStatus
      Role: !GetAtt lambdaIamRole.Arn
      Handler: 4translationStatus.lambda_handler

  postTranslation:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./functions/5postTranslation
      Role: !GetAtt lambdaIamRole.Arn
      Handler: 5postTranslation.lambda_handler

  comprehendFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./functions/6comprehendFunction
      Role: !GetAtt lambdaIamRole.Arn
      Handler: 6comprehendFunction.lambda_handler 

  createTableFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./functions/11createTable
      Role: !GetAtt lambdaIamRole.Arn
      Handler: 11createTable.lambda_handler
    DependsOn: databaseInstance

  #Custom Resource to execute lambda function 

  createTableLambdaCallout: 
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken: !GetAtt createTableFunction.Arn
    DependsOn: createTableFunction

  databaseCluster: 
    Type: AWS::RDS::DBCluster
    Properties:
      DBSubnetGroupName: !Ref SubnetID
      DatabaseName: t2database
      Engine: aurora-postgresql
      MasterUsername: !Ref DatabaseUser
      MasterUserPassword: !Ref DatabasePassword
      VpcSecurityGroupIds:
       - !Ref SecurityGroup
    DependsOn: SecurityGroup

  databaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref databaseCluster
      DBInstanceClass: db.t3.medium
      DBInstanceIdentifier: lpdb
      Engine: aurora-postgresql
      PubliclyAccessible: True
    DependsOn: databaseCluster

  DBHostParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: Host Address
      Name: t2-db-host
      Type: String
      Value: !GetAtt [databaseInstance, Endpoint.Address]
    DependsOn: databaseInstance

  DBUserParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: Username
      Name: t2-db-user
      Type: String
      Value: !Ref DatabaseUser

  DBPasswordParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: Password
      Name: t2-db-password
      Type: String
      Value: !Ref DatabasePassword

  DBDatabaseParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: Database name
      Name: t2-db-dbname
      Type: String
      Value: t2database

  DBPortParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: Host Address
      Name: t2-db-port
      Type: String
      Value: !GetAtt [databaseInstance, Endpoint.Port]
    DependsOn: databaseInstance

  DBTableNameParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: Host Address
      Name: t2-db-tablename
      Type: String
      Value: t2MainTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for RDS Instance"
      VpcId: !Ref VPC          
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0  
    DependsOn: VPC

  lambdaIamRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      Policies:
        -
          PolicyName: "SSMPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "kms:*"
                  - "ssm:GetParameters"
                  - "ssm:GetParameter"
                  - "iam:PassRole"
                Resource: "*"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
      - arn:aws:iam::aws:policy/ComprehendFullAccess
      - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/TranslateFullAccess

  translateIamRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "translate.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/IAMFullAccess
      - arn:aws:iam::aws:policy/TranslateFullAccess
      - arn:aws:iam::aws:policy/AWSLambdaExecute

  TranslateIamRoleArmParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: Translate Lambda IAM Role ARN
      Name: t2-translate-role
      Type: String
      Value: !GetAtt translateIamRole.Arn
    DependsOn: translateIamRole

# APIS with CORS policies
  T2Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:
        AllowHeaders: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token, X-Amz-User-Agent'"
        AllowOrigin: "'*'"
        AllowMethods: "'*'"
        AllowCredentials: "'true'"

  scanFunction: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/8scanFunction
      Role: !GetAtt lambdaIamRole.Arn
      Handler: 8scanFunction.lambda_handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /scan
            Method: any
            RestApiId:
              Ref: T2Api
            Auth:
              Authorizer: null
  deleteFunction: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/9deleteFunction
      Role: !GetAtt lambdaIamRole.Arn
      Handler: 9deleteFunction.lambda_handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /delete
            Method: any
            RestApiId:
              Ref: T2Api
            Auth:
              Authorizer: null
  searchFunction: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/10searchFunction
      Role: !GetAtt lambdaIamRole.Arn
      Handler: 10searchFunction.lambda_handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /search
            Method: any
            RestApiId:
              Ref: T2Api
            Auth:
              Authorizer: null
    DependsOn: databaseInstance          
  asyncFunction: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/1asyncFunction
      Role: !GetAtt lambdaIamRole.Arn
      Handler: 1asyncFunction.lambda_handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /async
            Method: any
            RestApiId:
              Ref: T2Api
            Auth:
              Authorizer: null
  updateAfterComp: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/7updateAfterComp
      Role: !GetAtt lambdaIamRole.Arn
      Handler: 7updateAfterComp.lambda_handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /update
            Method: any
            RestApiId:
              Ref: T2Api   
            Auth:
              Authorizer: null   

  T2ApiEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: T2 Api Endpoint
      Name: T2ApiEndpointParameter
      Type: String
      Value: !Sub "https://${T2Api}.execute-api.${AWS::Region}.amazonaws.com/dev/path"
    DependsOn: T2Api  

  ScanApiEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: Scan Function Api Endpoint
      Name: scanApiEndpointParameter
      Type: String
      Value: !Sub "https://${T2Api}.execute-api.${AWS::Region}.amazonaws.com/Stage/scan"
    DependsOn: T2Api

  DeleteApiEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: Delete Function Api Endpoint
      Name: deleteApiEndpointParameter
      Type: String
      Value: !Sub "https://${T2Api}.execute-api.${AWS::Region}.amazonaws.com/Stage/delete"
    DependsOn: T2Api

  SearchApiEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: Search Function Api Endpoint
      Name: searchApiEndpointParameter
      Type: String
      Value: !Sub "https://${T2Api}.execute-api.${AWS::Region}.amazonaws.com/Stage/serach"
    DependsOn: T2Api

  AsyncApiEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: Async Function Api Endpoint
      Name: userInputApiEndpointParameter
      Type: String
      Value: !Sub "https://${T2Api}.execute-api.${AWS::Region}.amazonaws.com/Stage/async"
    DependsOn: T2Api

  UpdateApiEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: Update Function Api Endpoint
      Name: compAfterEditApiEndpointParameter
      Type: String
      Value: !Sub "https://${T2Api}.execute-api.${AWS::Region}.amazonaws.com/Stage/update"
    DependsOn: T2Api          
 
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'

  ApiGatewayPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "LambdaAccess"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: 'Allow'
          Action: 'lambda:*'
          Resource: 
            - !GetAtt scanFunction.Arn
            - !GetAtt deleteFunction.Arn
            - !GetAtt asyncFunction.Arn
            - !GetAtt searchFunction.Arn

      Roles: 
      - 
        !Ref ApiGatewayIamRole

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  T2UploadStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    DependsOn: 
      - transcriptionStatus
      - postTranscription
      - translationStatus
      - postTranslation
      - comprehendFunction
      - updateAfterComp
    Properties:
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
      DefinitionString:
        !Sub |-
            {
              "Comment": "Polling step function for translate job complete",
              "StartAt": "Transcription Status",
              "States": {
                "Transcription Status": {
                  "Type": "Task",
                  "Resource": "${transcriptionStatus.Arn}",
                  "InputPath": "$.job_name",
                  "ResultPath": "$.transcription_status",
                  "Next": "Transcription Job Complete?",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ]
                },
                "Transcription Job Complete?": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.transcription_status.transcription_status",
                      "StringEquals": "IN_PROGRESS",
                      "Next": "Wait X Seconds 1"
                    },
                    {
                      "Variable": "$.transcription_status.transcription_status",
                      "StringEquals": "SUBMITTED",
                      "Next": "Wait X Seconds 1"
                    },
                    {
                      "Variable": "$.transcription_status.transcription_status",
                      "StringEquals": "COMPLETED",
                      "Next": "Post Transcription"
                    },
                    {
                      "Variable": "$.transcription_status.transcription_status",
                      "StringEquals": "FAILED",
                      "Next": "Post Transcription"
                    },
                    {
                      "Variable": "$.transcription_status.transcription_status",
                      "StringEquals": "STOPPED",
                      "Next": "Post Transcription"
                    }
                  ],
                  "Default": "Wait X Seconds 1"
                },
                "Wait X Seconds 1": {
                  "Type": "Wait",
                  "Seconds": 60,
                  "Next": "Transcription Status"
                },
                "Post Transcription": {
                  "Type": "Task",
                  "Resource": "${postTranscription.Arn}",
                  "InputPath": "$",
                  "ResultPath": "$.translation_JobId",
                  "Next": "LambdaPoll",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ]
                },
                "LambdaPoll": {
                  "Type": "Task",
                  "Resource": "${translationStatus.Arn}",
                  "InputPath": "$.translation_JobId",
                  "ResultPath": "$.translation_status",
                  "Next": "Job Complete?",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ]
                },
                "Job Complete?": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.translation_status",
                      "StringEquals": "IN_PROGRESS",
                      "Next": "Wait X Seconds"
                    },
                    {
                      "Variable": "$.translation_status",
                      "StringEquals": "SUBMITTED",
                      "Next": "Wait X Seconds"
                    },
                    {
                      "Variable": "$.translation_status",
                      "StringEquals": "COMPLETED",
                      "Next": "Update Database"
                    },
                    {
                      "Variable": "$.translation_status",
                      "StringEquals": "FAILED",
                      "Next": "Update Database"
                    },
                    {
                      "Variable": "$.translation_status",
                      "StringEquals": "STOPPED",
                      "Next": "Update Database"
                    }
                  ],
                  "Default": "Wait X Seconds"
                },
                "Wait X Seconds": {
                  "Type": "Wait",
                  "Seconds": 60,
                  "Next": "LambdaPoll"
                },
                "Update Database": {
                  "Type": "Task",
                  "Resource": "${postTranslation.Arn}",
                  "InputPath": "$",
                  "ResultPath": "$.s3url",
                  "Next": "Comprehend Keyphrases",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ]
                },
                "Comprehend Keyphrases": {
                  "Type": "Task",
                  "Resource": "${comprehendFunction.Arn}",
                  "InputPath": "$.s3url",
                  "ResultPath": "$.keyphrases",
                  "Next": "Add to SQL Database",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ]
                },
                "Add to SQL Database": {
                  "Type": "Task",
                  "Resource": "${updateAfterComp.Arn}",
                  "InputPath": "$",
                  "ResultPath": "$.result",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ],
                  "End": true
                }
              }
            }
  uploadStateMachineParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: Upload State Machine Endpoint
      Name: uploadStateMachineParameter
      Type: String
      Value: !GetAtt [ T2UploadStateMachine, Arn ]
    DependsOn: T2UploadStateMachine
      

  T2AfterEditStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    DependsOn: 
      - comprehendFunction
      - updateAfterComp
    Properties:
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
      DefinitionString:
        !Sub |-
            {
              "Comment": "Polling step function for translate job complete",
              "StartAt": "Comprehend Keyphrases",
              "States": {
                "Comprehend Keyphrases": {
                  "Type": "Task",
                  "Resource": "${comprehendFunction.Arn}",
                  "InputPath": "$.s3url",
                  "ResultPath": "$.keyphrases",
                  "Next": "Add to SQL Database",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ]
                  
                },
                "Add to SQL Database": {
                  "Type": "Task",
                  "Resource": "${updateAfterComp.Arn}",
                  "InputPath": "$",
                  "ResultPath": "$.result",
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "IntervalSeconds": 1,
                      "MaxAttempts": 3,
                      "BackoffRate": 2
                    }
                  ], 
                  "End": true
                }
              }
            } 
  afterEditStateMachineParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      DataType: text
      Description: After Edit State Machine Endpoint
      Name: afterEditStateMachineParameter
      Type: String
      Value: !GetAtt [ T2AfterEditStateMachine, Arn ]
    DependsOn: T2AfterEditStateMachine 
  

